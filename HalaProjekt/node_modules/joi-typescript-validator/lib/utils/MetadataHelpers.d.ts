import "reflect-metadata";
import { ValidationOptions } from "joi";
import { FieldsMap, SchemaArgs } from "../decorators/BaseDecorators";
import { Class } from "../types";
/**
 * Print class metadata to console
 * @template T
 * @param {Class<T>} klass Class for which to print metadata
 */
export declare function printMetadata<T>(klass: Class<T>): void;
/**
 * Get class fields metadata
 * @template T
 * @param {Class<T>} klass Class, for which, to get the fields metadata
 * @returns {FieldsMap | void}
 */
export declare function getMetadata<T>(klass: Class<T> | undefined): FieldsMap | undefined;
/**
 * Get ValidationOptions passed to class with `@SchemaOptions` decorator
 * @template T
 * @param {Class<T>} klass Class for which to get the schema options passed by decorator
 * @returns {ValidationOptions | void} Joi ValidationOptions
 */
export declare function getOptions<T>(klass: Class<T> | undefined): ValidationOptions | void;
/**
 * Get SchemaArgs passed to class with `@CustomSchema` decorator
 * @template T
 * @param {Class<T>} klass Class for which to get the custom Joi schema or schema function passed by decorator
 * @returns {SchemaArgs | void} Joi schema or schema function
 */
export declare function getGlobalArgs<T>(klass: Class<T> | undefined): SchemaArgs | void;
