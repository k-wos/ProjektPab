"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGlobalArgs = exports.getOptions = exports.getMetadata = exports.printMetadata = void 0;
require("reflect-metadata");
const __1 = require("..");
/**
 * Print class metadata to console
 * @template T
 * @param {Class<T>} klass Class for which to print metadata
 */
function printMetadata(klass) {
    console.dir(getMetadata(klass), { depth: null });
}
exports.printMetadata = printMetadata;
/**
 * Extract fields metadata from class, taking into account parent classes.
 * Recursevly get the metadata from class parents and merge them accordingly.
 * @template T
 * @param {Class<T>} klass Class, for which, to get the fields metadata
 * @param {TreeMetadata} metadata Metadata attached with reflect-metadata
 * @returns {FieldsMap}
 */
function extractClassMetadata(klass, metadata) {
    const classDescription = metadata.get(klass) || {};
    const fields = classDescription.fields || {};
    const parentClass = Object.getPrototypeOf(klass);
    if (parentClass.name !== "") {
        return Object.assign(Object.assign({}, extractClassMetadata(parentClass, metadata)), fields);
    }
    return fields;
}
/**
 * Get class fields metadata
 * @template T
 * @param {Class<T>} klass Class, for which, to get the fields metadata
 * @returns {FieldsMap | void}
 */
function getMetadata(klass) {
    if (klass === undefined) {
        return;
    }
    const metadata = Reflect.getMetadata(__1.MetadataKeys.Fields, klass.prototype);
    if (metadata === undefined) {
        return;
    }
    return extractClassMetadata(klass, metadata);
}
exports.getMetadata = getMetadata;
/**
 * Get ValidationOptions passed to class with `@SchemaOptions` decorator
 * @template T
 * @param {Class<T>} klass Class for which to get the schema options passed by decorator
 * @returns {ValidationOptions | void} Joi ValidationOptions
 */
function getOptions(klass) {
    if (klass === undefined) {
        return;
    }
    const metadata = Reflect.getMetadata(__1.MetadataKeys.Fields, klass.prototype);
    if (metadata === undefined) {
        return;
    }
    const classDescription = metadata.get(klass);
    if (classDescription === undefined) {
        const parentClass = Object.getPrototypeOf(klass);
        if (parentClass.name !== "") {
            return getOptions(parentClass);
        }
    }
    else {
        return classDescription.options;
    }
}
exports.getOptions = getOptions;
/**
 * Get SchemaArgs passed to class with `@CustomSchema` decorator
 * @template T
 * @param {Class<T>} klass Class for which to get the custom Joi schema or schema function passed by decorator
 * @returns {SchemaArgs | void} Joi schema or schema function
 */
function getGlobalArgs(klass) {
    if (klass === undefined) {
        return;
    }
    const metadata = Reflect.getMetadata(__1.MetadataKeys.Fields, klass.prototype);
    if (metadata === undefined) {
        return;
    }
    const classDescription = metadata.get(klass);
    if (classDescription === undefined) {
        const parentClass = Object.getPrototypeOf(klass);
        if (parentClass.name !== "") {
            return getGlobalArgs(parentClass);
        }
    }
    else {
        return classDescription.globalArgs;
    }
}
exports.getGlobalArgs = getGlobalArgs;
