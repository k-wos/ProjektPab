import BaseJoi from "joi";
import { Class } from "../types";
/**
 * Returns Joi schema for the given class
 * @template T
 * @param {Class<T>} klass             Class for which to get or build the schema
 * @param {boolean}  [shouldSave=true] Boolean flag to choose whether or not to save the schema
 * @returns {BaseJoi.Schema} Joi Schema
 */
export declare function getSchema<T>(klass: Class<T>, shouldSave?: boolean): BaseJoi.Schema<any>;
/**
 * Returns a plain object representing the schema's rules and properties for the given class
 * @template T
 * @param {Class<T>} klass             Class for which to get the schema's rules and properties
 * @param {boolean}  [shouldSave=true] Boolean flag to choose whether or not to save the schema
 * @returns {BaseJoi.Description} Joi schema's rules and properties
 */
export declare function getSchemaDescription<T>(klass: Class<T>, shouldSave?: boolean): BaseJoi.Description;
/**
 * Validates the class instance object and returns Joi validation result
 * @template T
 * @param {Class<T>} klass             Class of object
 * @param {object}   instance          Class instance object
 * @param {boolean}  [shouldSave=true] Boolean flag to choose whether or not to save the schema
 * @returns {BaseJoi.ValidationResult} Joi ValidationResult
 */
export declare function Validate<T extends object>(klass: Class<T>, instance: T, shouldSave?: boolean): BaseJoi.ValidationResult<any>;
