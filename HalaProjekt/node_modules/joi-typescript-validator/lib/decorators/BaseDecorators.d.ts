import "reflect-metadata";
import Joi, { ValidationOptions } from "joi";
import { Class } from "../types";
import { FieldDescription } from "./FieldDescription";
/**
 * Joi Schema or Joi SchemaFunction
 */
export declare type SchemaArgs = Joi.Schema | Joi.SchemaFunction;
/**
 * MetadataKeys constant object containing Reflect metadata keys
 */
export declare const MetadataKeys: {
    Fields: string;
};
/**
 * Threshold interface, describing a maximum or minimum (exclusive or inclusive) limit
 */
export interface Threshold {
    /**
     * Limit value
     */
    value: number;
    /**
     * Mark to set limit as exclusive
     */
    exclude?: boolean;
}
/**
 * ConditionSchema interface, describing Joi schema based on condition value
 */
export interface ConditionSchema {
    /**
     * Condition function to return boolean value
     */
    condition: (_args: unknown[]) => boolean;
    /**
     * Joi schema when condition evaluates to true
     */
    truthy: Joi.Schema;
    /**
     * Joi schema when condition evaluates to false
     */
    falsy: Joi.Schema;
}
/**
 * Key-value index signature containing description metadata for each field
 */
export declare type FieldsMap = {
    [key: string]: FieldDescription;
};
/**
 * Class description metadata
 */
export declare class ClassDescription {
    /**
     * Class fields object containing each field's FieldDescription
     */
    fields?: FieldsMap;
    /**
     * Class options attached with `@SchemaOptions` decorator
     */
    options?: ValidationOptions;
    /**
     * Class globalArgs attached with `@CustomSchema` decorator
     */
    globalArgs?: SchemaArgs;
}
/**
 * Class tree metadata
 */
export declare type TreeMetadata = Map<unknown, ClassDescription>;
/**
 * Mark field value as required
 * @template T
 */
export declare function Required<T extends object>(): (target: T, propertyKey: string) => void;
/**
 * Mark field value as optional
 * @template T
 */
export declare function Optional<T extends object>(): (target: T, propertyKey: string) => void;
/**
 * Mark field value as nullable
 * @template T
 * @param {boolean} [isEnabled=true] Flag used to overwrite decorator on parent class field
 */
export declare function Nullable<T extends object>(isEnabled?: boolean): (target: T, propertyKey: string) => void;
/**
 * Overwrite automatic field type with the given value
 * @template T
 * @template I
 * @param {Class<I>} type Primitive or class value to set the field type to
 */
export declare function ItemType<T extends object, I>(type: Class<I>): (target: T, propertyKey: string) => void;
/**
 * Constrain number field to be less than or equal to a certain value
 * @template T
 * @param {Threshold | number} value Value, by which, to constrain the field to be less than or equal to
 */
export declare function Max<T extends object>(value: Threshold | number): (target: T, propertyKey: string) => void;
/**
 * Constrain number field to be greater than or equal to a certain value
 * @template T
 * @param {Threshold | number} value Value, by which, to constrain the field to be greater than or equal to
 */
export declare function Min<T extends object>(value: Threshold | number): (target: T, propertyKey: string) => void;
/**
 * Constrain number field to be a positive number (greater than 0)
 * @template T
 * @param {boolean} [isEnabled=true] Flag used to overwrite decorator on parent class field
 */
export declare function Positive<T extends object>(isEnabled?: boolean): (target: T, propertyKey: string) => void;
/**
 * Constrain number field to be a negative number (less than 0)
 * @template T
 * @param {boolean} [isEnabled=true] Flag used to overwrite decorator on parent class field
 */
export declare function Negative<T extends object>(isEnabled?: boolean): (target: T, propertyKey: string) => void;
/**
 * Constrain array or string field length to be greater than 0
 * @template T
 * @param {boolean} [isEnabled=true] Flag used to overwrite decorator on parent class field
 */
export declare function NotEmpty<T extends object>(isEnabled?: boolean): (target: T, propertyKey: string) => void;
/**
 * Constrain array or string field to have a maximum length
 * @template T
 * @param {number} value Value, by which, to constrain the maximum length
 */
export declare function MaxLength<T extends object>(value: number): (target: T, propertyKey: string) => void;
/**
 * Constrain array or string field to have a minimum length
 * @template T
 * @param {number} value Value, by which, to constrain the minimum length
 */
export declare function MinLength<T extends object>(value: number): (target: T, propertyKey: string) => void;
/**
 * Constrain field to only the allowed values passed
 * @template T
 * @param {unknown[]} args Values, by which, to constrain the field
 */
export declare function ValidOptions<T extends object>(...args: unknown[]): (target: T, propertyKey: string) => void;
/**
 * Constrain field value to be of email format
 * @template T
 * @param {boolean} [isEnabled=true] Flag used to overwrite decorator on parent class field
 */
export declare function Email<T extends object>(isEnabled?: boolean): (target: T, propertyKey: string) => void;
/**
 * Constrain date or string field to be of a given format
 * @template T
 * @param {string} [format="YYYY-MM-DD"] Format, by which, to constrain the field
 */
export declare function DateString<T extends object>(format?: string): (target: T, propertyKey: string) => void;
/**
 * Constrain field or entire class fields by the Joi schema or schema function passed
 * @template T
 * @param {SchemaArgs} schema Joi schema or schema fuction, by which, to constrain field or class
 */
export declare function CustomSchema<T extends object>(schema: SchemaArgs): (target: T, propertyKey?: string | undefined) => void;
/**
 * Set class schema options, to be used when generating validations
 * @template T
 * @param {ValidationOptions} options Validation options
 */
export declare function SchemaOptions<T>(options: ValidationOptions): (target: Class<T>) => void;
